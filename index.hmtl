import express from "express";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import cors from "cors";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { v4 as uuidv4 } from "uuid";

dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));

const DATA_FILE = path.join(__dirname, "keys.json");
const PORT = process.env.PORT || 3000;
const JWT_SECRET = process.env.JWT_SECRET || "dev_secret";

function readData() {
  if (!fs.existsSync(DATA_FILE)) {
    fs.writeFileSync(DATA_FILE, JSON.stringify({ keys: [] }, null, 2));
  }
  const raw = fs.readFileSync(DATA_FILE, "utf-8");
  return JSON.parse(raw || '{"keys":[]}');
}

function writeData(data) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

async function verifyPassword(input) {
  const hash = process.env.ADMIN_PASS_HASH;
  const plain = process.env.ADMIN_PASS;
  if (hash) {
    return bcrypt.compare(input, hash);
  }
  if (!plain) return false;
  return input === plain;
}

function auth(req, res, next) {
  const h = req.headers.authorization || "";
  const token = h.startsWith("Bearer ") ? h.slice(7) : null;
  if (!token) return res.status(401).json({ error: "Unauthorized" });
  try {
    const payload = jwt.verify(token, JWT_SECRET);
    req.user = payload.sub;
    next();
  } catch {
    return res.status(401).json({ error: "Invalid token" });
  }
}

// Login
app.post("/login", async (req, res) => {
  const { username, password } = req.body || {};
  const okUser = username && username === process.env.ADMIN_USER;
  const okPass = await verifyPassword(password || "");
  if (!okUser || !okPass) return res.status(401).json({ error: "Sai tài khoản hoặc mật khẩu" });

  const token = jwt.sign({ sub: username }, JWT_SECRET, { expiresIn: "12h" });
  res.json({ token });
});

// API công khai JSON để bạn đọc từ code khác (đơn giản, không bảo vệ)
// Nếu cần private, hãy đặt sau middleware `auth`.
app.get("/api/keys.json", (req, res) => {
  res.json(readData());
});

// CRUD (bảo vệ bằng JWT)
app.get("/api/keys", auth, (req, res) => {
  res.json(readData().keys);
});

app.post("/api/keys", auth, (req, res) => {
  const { key, phone, expiry_date } = req.body || {};
  if (!key || !phone || !expiry_date) {
    return res.status(400).json({ error: "Thiếu trường: key, phone, expiry_date" });
  }
  const data = readData();
  const item = {
    id: uuidv4(),
    key: String(key).trim(),
    phone: String(phone).trim(),
    expiry_date: String(expiry_date).trim(), // YYYY-MM-DD
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  data.keys.push(item);
  writeData(data);
  res.status(201).json(item);
});

app.put("/api/keys/:id", auth, (req, res) => {
  const { id } = req.params;
  const { key, phone, expiry_date } = req.body || {};
  const data = readData();
  const idx = data.keys.findIndex(k => k.id === id);
  if (idx === -1) return res.status(404).json({ error: "Không tìm thấy" });

  if (key !== undefined) data.keys[idx].key = String(key).trim();
  if (phone !== undefined) data.keys[idx].phone = String(phone).trim();
  if (expiry_date !== undefined) data.keys[idx].expiry_date = String(expiry_date).trim();
  data.keys[idx].updated_at = new Date().toISOString();
  writeData(data);
  res.json(data.keys[idx]);
});

app.delete("/api/keys/:id", auth, (req, res) => {
  const { id } = req.params;
  const data = readData();
  const before = data.keys.length;
  data.keys = data.keys.filter(k => k.id !== id);
  if (data.keys.length === before) return res.status(404).json({ error: "Không tìm thấy" });
  writeData(data);
  res.status(204).send();
});

app.listen(PORT, () => {
  console.log(`Server running http://localhost:${PORT}`);
});
